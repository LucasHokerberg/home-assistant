# Start the heat when cold inside and outside
- alias: Climate - Start heating when cold
  trigger:
    platform: numeric_state
    entity_id: sensor.living_room_temperature
    below: 21.5
    for:
      minutes: 5
  condition:
    - condition: numeric_state
      entity_id: sensor.outdoor_temperature
      below: 17
    - condition: state
      entity_id: climate.living_room_hvac
      state: 'off'
  action:
    - service: climate.turn_on
      target:
        entity_id: climate.living_room_hvac
    - delay:
        seconds: 5
    - service: climate.set_hvac_mode
      target:
        entity_id: climate.living_room_hvac
      data:
        hvac_mode: heat
    - delay:
        seconds: 5
    - service: climate.set_temperature
      target:
        entity_id: climate.living_room_hvac
      data:
        temperature: '{{ states("input_number.living_room_hvac_target") }}'
    - delay:
        seconds: 5
    - service: climate.set_fan_mode
      target:
        entity_id: climate.living_room_hvac
      data:
        fan_mode: low

# Start the AC when warm inside and outside, and only if someone is home
- alias: Climate - Start cooling when warm
  trigger:
    platform: numeric_state
    entity_id: sensor.living_room_temperature
    above: 22.5
    for:
      minutes: 5
  condition:
    - condition: state
      entity_id: alarm_control_panel.snyggatorpsvagen_alarm
      state: disarmed
    - condition: numeric_state
      entity_id: sensor.outdoor_temperature
      above: 17
    - condition: state
      entity_id: climate.living_room_hvac
      state: 'off'
    - condition: state
      entity_id: input_boolean.night_mode
      state: 'off'
  action:
    - service: climate.turn_on
      target:
        entity_id: climate.living_room_hvac
    - delay:
        seconds: 5
    - service: climate.set_hvac_mode
      target:
        entity_id: climate.living_room_hvac
      data:
        hvac_mode: cool
    - delay:
        seconds: 5
    - service: climate.set_temperature
      target:
        entity_id: climate.living_room_hvac
      data:
        temperature: '{{ states("input_number.living_room_hvac_target") }}'
    - delay:
        seconds: 5
    - service: climate.set_fan_mode
      target:
        entity_id: climate.living_room_hvac
      data:
        fan_mode: low

# Change HVAC temperature when target is changed
- alias: Climate - Change temperature
  trigger:
    platform: state
    entity_id: input_number.living_room_hvac_target
  condition:
    condition: not
    conditions:
      condition: state
      entity_id: climate.living_room_hvac
      state: 'off'
  action:
    service: climate.set_temperature
    target:
      entity_id: climate.living_room_hvac
    data:
      temperature: '{{ states("input_number.living_room_hvac_target") }}'

# Turn off the heat when warm inside or outside, and the heat is on
- alias: Climate - Stop heating when warm
  trigger:
    - platform: numeric_state
      entity_id: sensor.living_room_temperature
      above: 22.5
      for:
        minutes: 30
    - platform: numeric_state
      entity_id: sensor.outdoor_temperature
      above: 17
      for:
        minutes: 30
  condition:
    condition: state
    entity_id: climate.living_room_hvac
    state: heat
  action:
    service: climate.turn_off
    target:
      entity_id: climate.living_room_hvac

# Turn off the AC when cold inside or outside, and the AC is on
- alias: Climate - Stop cooling when cold
  trigger:
    - platform: numeric_state
      entity_id: sensor.living_room_temperature
      below: 21.5
      for:
        minutes: 30
    - platform: numeric_state
      entity_id: sensor.outdoor_temperature
      below: 17
      for:
        minutes: 30
  condition:
    condition: state
    entity_id: climate.living_room_hvac
    state: cool
  action:
    service: climate.turn_off
    target:
      entity_id: climate.living_room_hvac

# Update bedroom radiator external temp
- alias: Climate - Bedroom external temp
  trigger:
    platform: template
    value_template: '{{ states.sensor.bedroom_temperature.attributes.temperature }}'
  action:
    service: input_number.set_value
    target:
      entity_id: number.bedroom_radiator_external_temp
    data:
      value: '{{ states("sensor.bedroom_temperature") }}'